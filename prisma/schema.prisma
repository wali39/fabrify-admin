// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Store {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String 
  userId      String
  billboards  Billboard[]  @relation("StoreToBillboard")
  categories  Category[]   @relation("StoreToCategory")
  sizes       Size[]       @relation("StoreToSize")
  colors      Color[]     @relation("StoreToColor")
  products    Product[]   @relation("StoreToProduct")
  orders      Order[]     @relation("StoreToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model Billboard{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  // id         String @id @default(uuid())
  storeId    String 
  store      Store @relation("StoreToBillboard",fields: [storeId],references: [id])
  categories Category[]
  label      String
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // @@index([storeId])
}
model Category{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String
  store       Store @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId],references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Size{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId      String
  store        Store @relation("StoreToSize",fields: [storeId],references: [id])
  name         String
  value        String
  productIds   String[] @db.ObjectId
  products     Product[] @relation(fields: [productIds],references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Color{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String 
  store       Store @relation("StoreToColor",fields: [storeId],references: [id])
  name        String
  value       String
  products    Product[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  storeId      String
  store        Store @relation("StoreToProduct",fields: [storeId],references: [id])
  categoryId   String
  category     Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  name         String
  price        Float
  isFeatured   Boolean @default(false)
  isArchived   Boolean @default(false)
  sizeIds       String[] @db.ObjectId
  // size         Size @relation(fields: [sizeId],references:[id])
  sizes         Size[] @relation(fields: [sizeIds],references:[id])
  colorId      String
  color        Color @relation(fields: [colorId],references: [id])
  images       Image[]
  orderItems   OrderItem[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Image{
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  productId  String
  product    Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  }
  model Order{
   id          String @id @default(auto()) @map("_id") @db.ObjectId
   storeId      String
   store        Store  @relation("StoreToOrder",fields: [storeId],references: [id])
   orderItems   OrderItem[]
   isPaid       Boolean  @default(false)
   phone        String   @default("")
   address      String   @default("")
   createdAt    DateTime  @default(now())
   updatedAt    DateTime  @updatedAt
  }

  model OrderItem{
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    orderId      String
    order        Order @relation(fields: [orderId],references: [id])
    productId    String
    product      Product @relation(fields: [productId],references: [id])
  }